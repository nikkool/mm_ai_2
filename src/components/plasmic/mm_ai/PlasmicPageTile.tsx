// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jvgKmcyqVhg6pkonUhiUTk
// Component: 3BT2mMQqhm
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_mm_ai.module.css" // plasmic-import: jvgKmcyqVhg6pkonUhiUTk/projectcss
import * as sty from "./PlasmicPageTile.module.css" // plasmic-import: 3BT2mMQqhm/css

import Line1Icon from "./icons/PlasmicIcon__Line1" // plasmic-import: kQKZ-hSYSGS/icon

export type PlasmicPageTile__VariantMembers = {}

export type PlasmicPageTile__VariantsArgs = {}
type VariantPropType = keyof PlasmicPageTile__VariantsArgs
export const PlasmicPageTile__VariantProps = new Array<VariantPropType>()

export type PlasmicPageTile__ArgsType = {
  image?: React.ReactNode
  name?: React.ReactNode
  desc?: React.ReactNode
}

type ArgPropType = keyof PlasmicPageTile__ArgsType
export const PlasmicPageTile__ArgProps = new Array<ArgPropType>(
  "image",
  "name",
  "desc"
)

export type PlasmicPageTile__OverridesType = {
  root?: p.Flex<"div">
  svg?: p.Flex<"svg">
}

export interface DefaultPageTileProps {
  image?: React.ReactNode
  name?: React.ReactNode
  desc?: React.ReactNode
  className?: string
}

function PlasmicPageTile__RenderFunc(props: {
  variants: PlasmicPageTile__VariantsArgs
  args: PlasmicPageTile__ArgsType
  overrides: PlasmicPageTile__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__mLqtb)}>
        <div className={classNames(defaultcss.all, sty.box__iWkuk)}>
          <p.PlasmicSlot
            defaultContents={
              <svg
                className={classNames(defaultcss.all, sty.svg__mXuaF)}
                role={"img"}
              />
            }
            value={args.image}
          />
        </div>

        <div className={classNames(defaultcss.all, sty.box__qezrd)}>
          <p.PlasmicSlot
            defaultContents={"Tile Name"}
            value={args.name}
            className={classNames(sty.slotName)}
          />
        </div>

        <Line1Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />

        <div className={classNames(defaultcss.all, sty.box__knDrp)}>
          <p.PlasmicSlot
            defaultContents={"Description"}
            value={args.desc}
            className={classNames(sty.slotDesc)}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  svg: "svg"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageTile__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPageTile__VariantsArgs
  args?: PlasmicPageTile__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicPageTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPageTile__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPageTile__ArgProps,
      internalVariantPropNames: PlasmicPageTile__VariantProps,
    })

    return PlasmicPageTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPageTile"
  } else {
    func.displayName = `PlasmicPageTile.${nodeName}`
  }
  return func
}

export const PlasmicPageTile = Object.assign(
  // Top-level PlasmicPageTile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPageTile
    internalVariantProps: PlasmicPageTile__VariantProps,
    internalArgProps: PlasmicPageTile__ArgProps,
  }
)

export default PlasmicPageTile
/* prettier-ignore-end */
