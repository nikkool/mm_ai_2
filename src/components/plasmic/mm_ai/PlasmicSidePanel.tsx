// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jvgKmcyqVhg6pkonUhiUTk
// Component: UBVooxeTK-
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import SidePanelItem from "../../SidePanelItem" // plasmic-import: VhUkRHIsl_/component

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_mm_ai.module.css" // plasmic-import: jvgKmcyqVhg6pkonUhiUTk/projectcss
import * as sty from "./PlasmicSidePanel.module.css" // plasmic-import: UBVooxeTK-/css

import DashboardIcon from "./icons/PlasmicIcon__Dashboard" // plasmic-import: O5FyEFhJp/icon
import CampaignIcon from "./icons/PlasmicIcon__Campaign" // plasmic-import: CJsX2j6BP/icon
import ContactIcon from "./icons/PlasmicIcon__Contact" // plasmic-import: kYzOXsfEk/icon
import LabelIcon from "./icons/PlasmicIcon__Label" // plasmic-import: TI5y__4ek/icon
import ConversationIcon from "./icons/PlasmicIcon__Conversation" // plasmic-import: N8AI2X3fv/icon
import CalendarIcon from "./icons/PlasmicIcon__Calendar" // plasmic-import: jiQ-RD-34/icon
import SettingsIcon from "./icons/PlasmicIcon__Settings" // plasmic-import: k1wuqX4j8/icon
import LogoutIcon from "./icons/PlasmicIcon__Logout" // plasmic-import: _gnBSmlZ9/icon
import _34HqbjMerSs3 from "./images/_34.jpeg" // plasmic-import: HqbjMerSS3/picture

export type PlasmicSidePanel__VariantMembers = {
  collapse: "collapse"
}

export type PlasmicSidePanel__VariantsArgs = {
  collapse?: SingleBooleanChoiceArg<"collapse">
}

type VariantPropType = keyof PlasmicSidePanel__VariantsArgs
export const PlasmicSidePanel__VariantProps = new Array<VariantPropType>(
  "collapse"
)

export type PlasmicSidePanel__ArgsType = {
  username?: React.ReactNode
  usercompany?: React.ReactNode
}

type ArgPropType = keyof PlasmicSidePanel__ArgsType
export const PlasmicSidePanel__ArgProps = new Array<ArgPropType>(
  "username",
  "usercompany"
)

export type PlasmicSidePanel__OverridesType = {
  root?: p.Flex<"div">
  userHeader?: p.Flex<"div">
  img?: p.Flex<"img">
}

export interface DefaultSidePanelProps {
  username?: React.ReactNode
  usercompany?: React.ReactNode
  collapse?: SingleBooleanChoiceArg<"collapse">
  className?: string
}

function PlasmicSidePanel__RenderFunc(props: {
  variants: PlasmicSidePanel__VariantsArgs
  args: PlasmicSidePanel__ArgsType
  overrides: PlasmicSidePanel__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__collapse]: hasVariant(variants, "collapse", "collapse"),
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.box__jf6Ls, {
          [sty.box__collapse__jf6LsR4FrB]: hasVariant(
            variants,
            "collapse",
            "collapse"
          ),
        })}
      >
        <div
          data-plasmic-name={"userHeader"}
          data-plasmic-override={overrides.userHeader}
          className={classNames(defaultcss.all, sty.userHeader)}
        >
          <div
            className={classNames(defaultcss.all, sty.box__hg0R1, {
              [sty.box__collapse__hg0R1R4FrB]: hasVariant(
                variants,
                "collapse",
                "collapse"
              ),
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.box__eVAbN, {
                [sty.box__collapse__eVAbNr4FrB]: hasVariant(
                  variants,
                  "collapse",
                  "collapse"
                ),
              })}
            >
              <div
                className={classNames(defaultcss.all, sty.box__r7S4D, {
                  [sty.box__collapse__r7S4Dr4FrB]: hasVariant(
                    variants,
                    "collapse",
                    "collapse"
                  ),
                })}
              >
                <img
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(defaultcss.img, sty.img)}
                  role={"img"}
                  src={_34HqbjMerSs3}
                />
              </div>

              {(hasVariant(variants, "collapse", "collapse") ? false : true) ? (
                <div
                  className={classNames(defaultcss.all, sty.box__dyKr, {
                    [sty.box__collapse__dyKrR4FrB]: hasVariant(
                      variants,
                      "collapse",
                      "collapse"
                    ),
                  })}
                >
                  <p.PlasmicSlot
                    defaultContents={"Evan Situ"}
                    value={args.username}
                  />

                  <p.PlasmicSlot
                    defaultContents={"MarketMe.ai"}
                    value={args.usercompany}
                  />
                </div>
              ) : null}
            </div>
          </div>
        </div>

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__yJof4, {
            [sty.sidePanelItem__collapse__yJof4R4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <DashboardIcon
              className={classNames(defaultcss.all, sty.svg__gUfok)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bg3T
              )}
            >
              {"DASHBOARD"}
            </div>
          }
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__uJfWy, {
            [sty.sidePanelItem__collapse__uJfWyR4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <CampaignIcon
              className={classNames(defaultcss.all, sty.svg__oydia)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__z5Ixn
              )}
            >
              {"CAMPAIGN"}
            </div>
          }
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__ssVAx, {
            [sty.sidePanelItem__collapse__ssVAxR4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <ContactIcon
              className={classNames(defaultcss.all, sty.svg__qtdo6)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___8A4B
              )}
            >
              {"CONTACTS"}
            </div>
          }
          selected={"selected" as const}
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__ktGd2, {
            [sty.sidePanelItem__collapse__ktGd2R4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <LabelIcon
              className={classNames(defaultcss.all, sty.svg__p9LzW)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__jUwFu
              )}
            >
              {"LABEL"}
            </div>
          }
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__sbNsT, {
            [sty.sidePanelItem__collapse__sbNsTr4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <ConversationIcon
              className={classNames(defaultcss.all, sty.svg___0Bnmg)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__s2FvD
              )}
            >
              {"CONVERSATION"}
            </div>
          }
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem___2KgtY, {
            [sty.sidePanelItem__collapse___2KgtYr4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <CalendarIcon
              className={classNames(defaultcss.all, sty.svg__yA6Gl)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___1C0DC
              )}
            >
              {"CALENDAR"}
            </div>
          }
        />

        <SidePanelItem
          className={classNames("__wab_instance", sty.sidePanelItem__aKFg4, {
            [sty.sidePanelItem__collapse__aKFg4R4FrB]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
          collapse={
            hasVariant(variants, "collapse", "collapse")
              ? ("collapse" as const)
              : undefined
          }
          icon={
            <SettingsIcon
              className={classNames(defaultcss.all, sty.svg___914Jf)}
              role={"img"}
            />
          }
          name={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bA4NT
              )}
            >
              {"SETTINGS"}
            </div>
          }
        />

        <div className={classNames(defaultcss.all, sty.box__dMcBp)}>
          <div className={classNames(defaultcss.all, sty.box__wXvOs)}>
            <LogoutIcon
              className={classNames(defaultcss.all, sty.svg__dqNAr, {
                [sty.svg__collapse__dqNArR4FrB]: hasVariant(
                  variants,
                  "collapse",
                  "collapse"
                ),
              })}
              role={"img"}
            />

            {(hasVariant(variants, "collapse", "collapse") ? false : true) ? (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__dSknm,
                  {
                    [sty.box__collapse__dSknmR4FrB]: hasVariant(
                      variants,
                      "collapse",
                      "collapse"
                    ),
                  }
                )}
              >
                {"Logout"}
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "userHeader", "img"],
  userHeader: ["userHeader", "img"],
  img: ["img"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  userHeader: "div"
  img: "img"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidePanel__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSidePanel__VariantsArgs
  args?: PlasmicSidePanel__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicSidePanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSidePanel__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidePanel__ArgProps,
      internalVariantPropNames: PlasmicSidePanel__VariantProps,
    })

    return PlasmicSidePanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSidePanel"
  } else {
    func.displayName = `PlasmicSidePanel.${nodeName}`
  }
  return func
}

export const PlasmicSidePanel = Object.assign(
  // Top-level PlasmicSidePanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userHeader: makeNodeComponent("userHeader"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSidePanel
    internalVariantProps: PlasmicSidePanel__VariantProps,
    internalArgProps: PlasmicSidePanel__ArgProps,
  }
)

export default PlasmicSidePanel
/* prettier-ignore-end */
