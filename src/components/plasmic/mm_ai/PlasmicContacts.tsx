// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jvgKmcyqVhg6pkonUhiUTk
// Component: jaTCIGBsXCTU
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import SidePanel from "../../SidePanel" // plasmic-import: UBVooxeTK-/component
import PageTile from "../../PageTile" // plasmic-import: 3BT2mMQqhm/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: rE-Bz6JbzKXO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_mm_ai.module.css" // plasmic-import: jvgKmcyqVhg6pkonUhiUTk/projectcss
import * as sty from "./PlasmicContacts.module.css" // plasmic-import: jaTCIGBsXCTU/css

import AddUserIcon from "./icons/PlasmicIcon__AddUser" // plasmic-import: PMFZX68-d/icon
import ImportListIcon from "./icons/PlasmicIcon__ImportList" // plasmic-import: wYe1w_1YC/icon
import QrScanIcon from "./icons/PlasmicIcon__QrScan" // plasmic-import: pgSnHbK2y/icon

export type PlasmicContacts__VariantMembers = {
  expand: "expand"
}

export type PlasmicContacts__VariantsArgs = {
  expand?: SingleBooleanChoiceArg<"expand">
}

type VariantPropType = keyof PlasmicContacts__VariantsArgs
export const PlasmicContacts__VariantProps = new Array<VariantPropType>(
  "expand"
)

export type PlasmicContacts__ArgsType = {}
type ArgPropType = keyof PlasmicContacts__ArgsType
export const PlasmicContacts__ArgProps = new Array<ArgPropType>()

export type PlasmicContacts__OverridesType = {
  root?: p.Flex<"div">
  sidePanel?: p.Flex<typeof SidePanel>
  listcontacts?: p.Flex<"div">
}

export interface DefaultContactsProps {
  expand?: SingleBooleanChoiceArg<"expand">
  className?: string
}

function PlasmicContacts__RenderFunc(props: {
  variants: PlasmicContacts__VariantsArgs
  args: PlasmicContacts__ArgsType
  overrides: PlasmicContacts__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__expand]: hasVariant(variants, "expand", "expand") }
          )}
        >
          <div className={classNames(defaultcss.all, sty.box___8DaCn)}>
            <SidePanel
              data-plasmic-name={"sidePanel"}
              data-plasmic-override={overrides.sidePanel}
              collapse={
                hasVariant(variants, "expand", "expand") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? undefined
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("collapse" as const)
                  : undefined
              }
            />

            <div
              className={classNames(defaultcss.all, sty.box__sd2Fu, {
                [sty.box__expand__sd2FutkCTh]: hasVariant(
                  variants,
                  "expand",
                  "expand"
                ),
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                className={classNames(defaultcss.all, sty.box___0DpX)}
              >
                <PageTile
                  className={classNames("__wab_instance", sty.pageTile__ufTTd)}
                  desc={"Enter individual contact"}
                  image={
                    <AddUserIcon
                      className={classNames(defaultcss.all, sty.svg__cnHu0)}
                      role={"img"}
                    />
                  }
                  name={"Add a Contact"}
                />

                <PageTile
                  className={classNames("__wab_instance", sty.pageTile__ufiY)}
                  desc={"Upload a list of contacts"}
                  image={
                    <ImportListIcon
                      className={classNames(defaultcss.all, sty.svg___0Acnu)}
                      role={"img"}
                    />
                  }
                  name={"Import List"}
                />

                <PageTile
                  className={classNames("__wab_instance", sty.pageTile__sR7P)}
                  desc={"Generate QR code sticker"}
                  image={
                    <QrScanIcon
                      className={classNames(defaultcss.all, sty.svg___3Pdi3)}
                      role={"img"}
                    />
                  }
                  name={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__rIqE7
                      )}
                    >
                      {"Create Onboarding Template"}
                    </div>
                  }
                />
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <div
                  data-plasmic-name={"listcontacts"}
                  data-plasmic-override={overrides.listcontacts}
                  className={classNames(defaultcss.all, sty.listcontacts, {
                    [sty.listcontacts__expand]: hasVariant(
                      variants,
                      "expand",
                      "expand"
                    ),
                  })}
                />
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "sidePanel", "listcontacts"],
  sidePanel: ["sidePanel"],
  listcontacts: ["listcontacts"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  sidePanel: typeof SidePanel
  listcontacts: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContacts__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicContacts__VariantsArgs
  args?: PlasmicContacts__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicContacts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicContacts__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContacts__ArgProps,
      internalVariantPropNames: PlasmicContacts__VariantProps,
    })

    return PlasmicContacts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicContacts"
  } else {
    func.displayName = `PlasmicContacts.${nodeName}`
  }
  return func
}

export const PlasmicContacts = Object.assign(
  // Top-level PlasmicContacts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidePanel: makeNodeComponent("sidePanel"),
    listcontacts: makeNodeComponent("listcontacts"),

    // Metadata about props expected for PlasmicContacts
    internalVariantProps: PlasmicContacts__VariantProps,
    internalArgProps: PlasmicContacts__ArgProps,
  }
)

export default PlasmicContacts
/* prettier-ignore-end */
