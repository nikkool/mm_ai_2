// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jvgKmcyqVhg6pkonUhiUTk
// Component: VhUkRHIsl_
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_mm_ai.module.css" // plasmic-import: jvgKmcyqVhg6pkonUhiUTk/projectcss
import * as sty from "./PlasmicSidePanelItem.module.css" // plasmic-import: VhUkRHIsl_/css

import Mask2Icon from "./icons/PlasmicIcon__Mask2" // plasmic-import: zIwQZQwU83O/icon

export type PlasmicSidePanelItem__VariantMembers = {
  selected: "selected"
  collapse: "collapse"
}

export type PlasmicSidePanelItem__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">
  collapse?: SingleBooleanChoiceArg<"collapse">
}

type VariantPropType = keyof PlasmicSidePanelItem__VariantsArgs
export const PlasmicSidePanelItem__VariantProps = new Array<VariantPropType>(
  "selected",
  "collapse"
)

export type PlasmicSidePanelItem__ArgsType = {
  icon?: React.ReactNode
  name?: React.ReactNode
}

type ArgPropType = keyof PlasmicSidePanelItem__ArgsType
export const PlasmicSidePanelItem__ArgProps = new Array<ArgPropType>(
  "icon",
  "name"
)

export type PlasmicSidePanelItem__OverridesType = {
  root?: p.Flex<"div">
}

export interface DefaultSidePanelItemProps {
  icon?: React.ReactNode
  name?: React.ReactNode
  selected?: SingleBooleanChoiceArg<"selected">
  collapse?: SingleBooleanChoiceArg<"collapse">
  className?: string
}

function PlasmicSidePanelItem__RenderFunc(props: {
  variants: PlasmicSidePanelItem__VariantsArgs
  args: PlasmicSidePanelItem__ArgsType
  overrides: PlasmicSidePanelItem__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__collapse]: hasVariant(variants, "collapse", "collapse"),
        [sty.root__selected]: hasVariant(variants, "selected", "selected"),
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.box__q4PgD, {
          [sty.box__collapse__q4PgD4UZ3X]: hasVariant(
            variants,
            "collapse",
            "collapse"
          ),
          [sty.box__selected__q4PgDMsMtx]: hasVariant(
            variants,
            "selected",
            "selected"
          ),
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box__sw8Qs, {
            [sty.box__collapse__sw8Qs4UZ3X]: hasVariant(
              variants,
              "collapse",
              "collapse"
            ),
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.box__tj5Wk, {
              [sty.box__selected__tj5WkMsMtx]: hasVariant(
                variants,
                "selected",
                "selected"
              ),
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                <Mask2Icon
                  className={classNames(defaultcss.all, sty.svg__g0G4U)}
                  role={"img"}
                />
              }
              value={args.icon}
              className={classNames(sty.slotIcon, {
                [sty.slotIcon__selected]: hasVariant(
                  variants,
                  "selected",
                  "selected"
                ),
              })}
            />

            {(hasVariant(variants, "collapse", "collapse") ? false : true) ? (
              <div
                className={classNames(defaultcss.all, sty.box__lBhXa, {
                  [sty.box__collapse__lBhXa4UZ3X]: hasVariant(
                    variants,
                    "collapse",
                    "collapse"
                  ),
                })}
              >
                <p.PlasmicSlot
                  defaultContents={"Dashboard"}
                  value={args.name}
                  className={classNames(sty.slotName, {
                    [sty.slotName__collapse]: hasVariant(
                      variants,
                      "collapse",
                      "collapse"
                    ),
                    [sty.slotName__selected]: hasVariant(
                      variants,
                      "selected",
                      "selected"
                    ),
                  })}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidePanelItem__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSidePanelItem__VariantsArgs
  args?: PlasmicSidePanelItem__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicSidePanelItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSidePanelItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidePanelItem__ArgProps,
      internalVariantPropNames: PlasmicSidePanelItem__VariantProps,
    })

    return PlasmicSidePanelItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSidePanelItem"
  } else {
    func.displayName = `PlasmicSidePanelItem.${nodeName}`
  }
  return func
}

export const PlasmicSidePanelItem = Object.assign(
  // Top-level PlasmicSidePanelItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSidePanelItem
    internalVariantProps: PlasmicSidePanelItem__VariantProps,
    internalArgProps: PlasmicSidePanelItem__ArgProps,
  }
)

export default PlasmicSidePanelItem
/* prettier-ignore-end */
